#!/usr/bin/env python3

'''
Search path for binaries with the name foo:

$ pathsearch foo
prints all binaries with 'foo' in the name
$ pathsearch server smc
prints all binaries with either 'server' or 'smc' in the name

Regexes are accepted:
$ pathsearch buc.*ild
'''

import sys, os, re
import argparse
import logging

LOG = logging.getLogger()
LOG.setLevel('INFO')
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)


def parse_args():
    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        '-d', '--debug',
        action='store_true',
        help='enable debug logging information',
    )
    parser.add_argument(
        'binaryname',
        #type=int,
        nargs='+',
        help='regex of binary names to search for in PATH'
    )
    return parser.parse_args()


def main():
    args = parse_args()
    re_devserver = re.compile("|".join(args.binaryname))
    path = os.getenv("PATH")
    for p in path.split(":"):
        try:
            files = os.listdir(p)
        except OSError:
            sys.stderr.write("no such directory {}\n".format(p))
            continue
        for f in files:
            if re_devserver.search(f) and os.path.isfile(os.path.join(p, f)):
                print("{}/{}".format(p, f))


if __name__ == '__main__':
    main()
