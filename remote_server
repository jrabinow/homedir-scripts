#!/bin/bash

readonly ANSIBLE_DIR="${HOME}/bin/ansible"
readonly KEYFILE="${HOME}/.ssh/jrabinow.pem"
readonly DOWNLOAD_DIR="${HOME}/Downloads"

readonly REMOTE_USER=ubuntu
readonly TOR_BROWSER_VERSION=5.5.4

function usage()
{
	cat << EOF
Usage: $(basename $0) [OPTION]... COMMAND
Options: -h: print this help message
Commands: start|launch: launch remote server
	  stop|terminate: shutdown remote server
	  restart|reboot: restart new instance of server
	  list: prints all running remote server IPs
	  status: prints remote server state ("Up" or "Down")
	  push ARG: copies ARG to remote server. ARG must be a local path to a file
	  pull ARG: pulls ARG from remote server. ARG must be a path to a file on remote server
	  shell: ssh to remote server
	  install ARG: install ARG on remote server
	  run ARG: launch X program on remote server
  	  download ARG: downloads ARG on remote server
	  tor: launch tor browser on remot server
EOF
}

function launch()
{
	ansible-playbook instance_start.yml
}

function terminate()
{
	ansible-playbook terminate.yml
}

function list()
{
	./hostfiles/ec2.py|grep -E -A1 '^\s*"ec2":\s*\[\s*$'|tail -1|tr -d '[:blank:]"'
}

function status()
{
	ip_addr=$(list)
	[ ! -z "${ip_addr}" ] && echo "Up" || echo "Down"
}

function check_running()
{
	if [ $(status) != "Up" ]; then
		echo "Error: remote server not running"
		exit 1
	fi
}

function require_running()
{
	if [ $(status) != "Up" ]; then
		launch
	fi
	ip_addr=$(list)
	if [ -z "${ip_addr}" ]; then
		echo "Error obtaining remote IP address. Exiting now..."
		exit 1
	fi
}

function push()
{
	check_running
	SRC=$1; shift
	if [[ $SRC != /* ]]; then
		SRC="${OLDPWD}/${SRC}"
	fi
	DEST="${1:-.}"; shift
	ansible-playbook push.yml --extra-vars="src='${SRC}' dest='${DEST}'"
}

function pull()
{
	check_running
	SRC=$1; shift
#	if [[ $SRC != /* ]]; then
#		SRC="${OLDPWD}/${SRC}"
#	fi
	DEST="${1:-.}"; shift
	ansible-playbook pull.yml --extra-vars="src='${SRC}' dest='${DEST}'"
}

function remote_shell()
{
	require_running
	cmd="$@"
	if [ ! -z "${cmd}" ]; then
		ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -Y -i "${KEYFILE}" "${REMOTE_USER}@${ip_addr}" "${cmd}"
	else
		push ~/.tmux.conf
		push ~/.vimrc
		ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -Y -i "${KEYFILE}" "${REMOTE_USER}@${ip_addr}" -t tmux
	fi
}

function x_program()
{
	require_running
	remote_cmd="$@"; shift
	# TODO: add auto-install option in case program isn't already available
	# http://packages.ubuntu.com/trusty/allpackages?format=txt.gz
	ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -Y -i "${KEYFILE}" "ubuntu@${ip_addr}" "${remote_cmd}" # 2>&1 | grep 'command not found'"
}

function install()
{
	check_running
	ansible-playbook install.yml --extra-vars="package=$@"
}

function download()
{
	require_running
	download_url="${1}"; shift
	install aria2
	ansible-playbook download.yml --extra-vars "download_url=${download_url}"
	if [ $? != 0 ]; then
		echo "Retrying with wget"
		remote_shell wget -t20 "${download_url}"
	fi
}

function tor-browser()
{
	require_running
	readonly TOR_ARCHIVE="tor-browser-linux64-${TOR_BROWSER_VERSION}_en-US.tar.xz"
	install libfontconfig1
	install libxrender1
	install libasound2
	install libgtk2.0-0
	install libxt6
	if [ -f ~/bin/Browser/start-tor-browser ]; then
		tar -Jcf "/tmp/${TOR_ARCHIVE}" ~/bin/Browser
		exit 0
		push "/tmp/${TOR_ARCHIVE}"
		rm "/tmp/${TOR_ARCHIVE}"
	else
		echo "foo"
		exit 0
		download "https://www.torproject.org/dist/torbrowser/${TOR_BROWSER_VERSION}/${TOR_ARCHIVE}"
	fi
	remote_shell tar -Jxf "${TOR_ARCHIVE}"
	remote_shell ./tor-browser_en-US/Browser/start-tor-browser
}

function main()
{
	cd "${ANSIBLE_DIR}"

	# Declare AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY variables in
	# credentials file:
	#export AWS_ACCESS_KEY_ID=xxxxxxxxxxxxxxxxxxxx
	#export AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
	source ./credentials

	while getopts "h" opt; do
		case "${opt}" in
			h)
				usage
				exit 0
				;;
			?)
				echo "Unknown option, exiting now" >&2
				usage
				exit 1
				;;

		esac
	done

	if [ $# -lt 1 ]; then
		usage
		exit 0
	fi
	cmd="${1}"; shift
	case "${cmd}" in
		"start"|"launch")
			launch "$@"
			;;
		"stop"|"terminate")
			terminate "$@"
			;;
		"restart"|"reboot")
			terminate "$@"
			launch "$@"
			;;
		"status")
			status "$@"
			;;
		"list")
			list "$@"
			;;
		"push")
			push "$@"
			;;
		"pull")
			pull "$@"
			;;
		"shell")
			remote_shell "$@"
			;;
		"install")
			install "$@"
			;;
		"run")
			x_program "$@"
			;;
		"download")
			download "$@"
			;;
		"tor")
			tor-browser "$@"
			;;
		*)
			echo "Unknown command, exiting now" >&2
			usage
			exit 1
			;;
	esac
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
	main "$@"
fi
