#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
browser built-in downloaders can choke on large files, this script will convert
the curl command from 'browser devtools -> network -> copy as cURL' into an
aria2c command and run it

Usage:
    curl2aria [OPTION...] <PASTE CURL COMMAND HERE>
"""

import argparse
import logging
import re
import os

LOG = logging.getLogger()
LOG.setLevel("INFO")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="enable debug logging information",
    )
    parser.add_argument(
        "--norun",
        action="store_true",
        help="don't run the command, just print it to stdout"
    )
    return parser.parse_known_args()


def main():
    args, unknowns = parse_args()

    filter_re = re.compile("^(curl|--compressed)$")
    replace_header_re = re.compile("^range:\s*bytes=\d+-$")
    aria_cmd_list = [
        "aria2c",
        "-x10",
        "-s20",
        "-m0",
    ]
    for arg in unknowns:
        if not filter_re.match(arg) and not replace_header_re.match(arg):
            if arg == "-H":
                arg = "--header"
            aria_cmd_list.append(f"'{arg}'")
    print("===========================")
    cmd = " ".join(aria_cmd_list)
    if args.norun:
        print(" ".join(aria_cmd_list))
    else:
        ret = os.system(cmd)
        return ret


if __name__ == "__main__":
    main()
