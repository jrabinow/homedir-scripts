#!/system/bin/env bash

set -e -u
set -o pipefail

# wrapper around `borgbackup` to make sure it runs with all the correct params
#
# Usecase: use cron to auto-backup `/storage/emulated/$user` every night. You
# will need a rooted phone with a microsd slot and a microsd card of large
# enough size
# - install https://f-droid.org/en/packages/it.faerb.crond/
# - install https://f-droid.org/en/packages/com.termux/
# - launch termux, install borgbackup
# - make sure your miscro-sd card is mounted on the phone, see
#   https://github.com/jrabinow/homedir-scripts/blob/main/platform_specific/android/luksmount
# - save https://github.com/jrabinow/droidscripts/blob/main/termux_cronwrap.sh to
#   `/data` and `chmod +x` it
# - add `/data/termux_cronwrap.sh cronenborg -u0` to your /data/crontab to
#   backup user0's internal storage to the phone's microsd card
# - optional: install termux:api from fdroid for notifications


readonly PARTLABEL=microsd_luks
PARTUUID="$(blkid "/dev/mapper/${PARTLABEL}" -o export|grep '^UUID'|cut -d= -f2)"
readonly PARTUUID
readonly MOUNTPOINT="/mnt/media_rw/${PARTUUID}"
readonly REPO_PATH="${MOUNTPOINT}/archive"
readonly BATT_MIN_PERCENTAGE=30

function usage()
{
    cat << EOF
Usage: ${0##*/}" [OPTION]...
Options: --help, -h: show this help dialog
EOF
}

function battery_status ()
{
    battstats="$(su -c 'dumpsys battery')"
    isplugged="$(grep 'AC powered: ' <<< "${battstats}"|awk '{print $3}')"
    percentage="$(grep -E '^\s*level:' <<< "${battstats}"|awk '{print $2}')"

    "${isplugged}" || [ "${percentage}" -ge ${BATT_MIN_PERCENTAGE} ]
}

function gen_notification ()
{
    title="${1}"; shift
    text="${1}"; shift

    timeout 30 cmd notification post -S bigtext -t "${title}" 'Im really not sure what this is' "${text}" > /dev/null
}

function verify_is_mounted ()
{
    mount|grep "${PARTLABEL} on ${MOUNTPOINT} type ext4" >/dev/null
}

function archive_name ()
{
    backuptype="${1}"; shift
    user="${1}"; shift
    archive_ts="${1}"; shift

    echo "u${user}_${backuptype}_${archive_ts}"
}

function backup ()
{
    backuptype="${1}"; shift
    datadir="${1}"; shift
    user="${1}"; shift
    archive_ts="${1}"; shift

    archive_name="$(archive_name "${backuptype}" "${user}" "${archive_ts}")"
    full_repo_path="${REPO_PATH}/${user}/${backuptype}.borg"
    full_archive_path="${full_repo_path}::${archive_name}"

    verify_is_mounted

    if [ ! -d "${full_repo_path}" ]; then
        mkdir -p "${full_repo_path}"
        # timeout after 10min

        timeout 600 borg init "${full_repo_path}"
    fi
    # abort after 3 hours == 10800 seconds
    timeout 10800 borg create -e Android "${full_archive_path}" "${datadir}/${user}"
    timeout 10800 borg prune --keep-last 1 --keep-minutely 60 -H 24 -d 7 -w 4 -m 12 -y 10 "${full_repo_path}"
}

function main()
{
    user=0
    while getopts "hu:-:" opt; do
        case ${opt} in
            h) # help message
                usage
                exit 0
                ;;
            u)
                user="${OPTARG}"
                ;;
            -)
                case "${OPTARG}" in
                    help)
                        usage
                        exit 0
                        ;;
                    *)
                        printf 'Unknown option, exiting now\n' >&2
                        exit 1
                        ;;
                esac
                ;;
            ?)
                printf 'Unknown option, exiting now\n' >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ ${1:-} == '--' ]] && shift

    archive_ts="$(date +"%Y-%m-%d-%H-%M-%S")"

    verify_is_mounted

    if battery_status; then
        backup storage /storage/emulated "${user}" "${archive_ts}"
        backup appdata REPLACEME "${user}" "${archive_ts}"
        if [ "$(date +%A)" == "Sunday" ]; then
            backup apks REPLACEME "${user}" "${archive_ts}"
        fi
        gen_notification "cronenborg" "${archive_name} successful run for user ${user}\nCreated the following archives:\n$(archive_name storage "${user}" "${archive_ts}")\n$(archive_name appdata "${user}" "${archive_ts}")\n$(archive_name storage "${user}" "${archive_ts}")\n"
    else
        gen_notification "cronenborg" "battery not charging and too low, skipping for user ${user}"
    fi
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
