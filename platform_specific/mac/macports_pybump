#!/usr/bin/env -S bash

set -e -u
set -o pipefail

# write some cool doc here

function usage()
{
    cat << EOF
Usage: ${0##*/}" [OPTION]... PORTNAME [PORTNAME...]
Options: --help, -h: show this help dialog
         -p ARG: python version, no dot
         --notests: keep going if no tests FIXMEEEEE
         --basebranch ARG: use ARG as base git branch instead of master
EOF
}

function portfile_add_pyversion()
{
    pypkg="${1}"
    shift
    pyver="${1}"
    shift

    grep -E '^python.versions\s+' "./python/${pypkg}/Portfile" \
        && (grep -E "^python.versions\s+${pyver}" "./python/${pypkg}/Portfile" \
            || sed -i "s/^python.versions\(.*\)/python.versions\1 ${pyver}/" "python/${pypkg}/Portfile" \
            && grep -E "^python.versions\s+.* ${pyver}" "./python/${pypkg}/Portfile")
}

function get_versinfo()
{
    sh -c 'printf "%s\n" "macOS `sw_vers -productVersion` `sw_vers -buildVersion` `uname -m`" "`xcodebuild -version|awk '\''NR==1{x=$0}END{print x" "$NF}'\''`"'
}

function upgrade_port()
{
    python_pkg_name="$1"
    shift
    sed -i -E 's/^python.versions(.*)/python.versions\1 311/' "$(port fil e "py-${python_pkg_name}")"
    git add -p "$(port file "py-${python_pkg_name}")"
    portindex
}

function gen_prtxt()
{
    pypkg=$1
    shift
    pyver=$1
    shift

    cat << EOF | tee /dev/tty | pbcopy
#### Description

${pypkg}: add python$(cut -b1 <<< "${pyver}").$(cut -b2- <<< "${pyver}") subport

###### Type(s)
- [ ] bugfix
- [x] enhancement
- [ ] security fix

###### Tested on
$(get_versinfo)

###### Verification <!-- (delete not applicable items) -->
Have you

- [x] followed our [Commit Message Guidelines](https://trac.macports.org/wiki/CommitMessages)?
- [x] squashed and [minimized your commits](https://guide.macports.org/#project.github)?
- [x] checked that there aren't other open [pull requests](https://github.com/macports/macports-ports/pulls) for the same change?
- [x] checked your Portfile with \`port lint --nitpick\`?
- [x] tried existing tests with \`sudo port test\`?
- [x] tried a full install with \`sudo port -vst install\`?
- [x] tested basic functionality of all binary files?

<!-- Use "skip notification" (surrounded with []) to avoid notifying maintainers -->
EOF
}

function main()
{
    notests=false
    basebranch=master

    while getopts "hp:-:" opt; do
        case ${opt} in
            h) # help message
                usage
                exit 0
                ;;
            p)
                pyver="${OPTARG}"
                ;;
            -)
                case "${OPTARG}" in
                    help)
                        usage
                        exit 0
                        ;;
                    notests)
                        notests=true
                        ;;
                    basebranch)
                        basebranch="${!OPTIND}"
                        OPTIND=$((OPTIND + 1))
                        ;;
                    *)
                        printf 'Unknown option, exiting now\n' >&2
                        exit 1
                        ;;
                esac
                ;;
            ?)
                printf 'Unknown option, exiting now\n' >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ ${1-} == '--' ]] && shift

    if [ $# -lt 1 ]; then
        echo "Missing port name" >&2
        usage
        exit 1
    fi

    # shellcheck disable=SC2154
    grep -E "^file://${macports} \[nosync,default\]$" /opt/local/etc/macports/sources.conf \
        || (echo 'did you change /opt/local/etc/macports/sources.conf?' && false)
    grep -E '^#rsync://rsync.macports.org/macports/release/tarballs/ports.tar \[default\]$' \
        /opt/local/etc/macports/sources.conf \
        || (echo 'did you change /opt/local/etc/macports/sources.conf?' && false)
    while [ $# -gt 0 ]; do
        pypkg="${1}"
        shift
        upgrade_port "${pypkg}" "${pyver}" "${notests}" "${basebranch}"
    done
    gen_prtxt "${pypkg}" "${pyver}"
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
