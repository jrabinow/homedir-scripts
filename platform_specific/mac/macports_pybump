#!/usr/bin/env -S bash

set -e -u
set -o pipefail

# write some cool doc here

function usage()
{
    cat << EOF
Usage: ${0##*/}" [OPTION]... PORTNAME [PORTNAME...]
Options: --help, -h: show this help dialog
         -p ARG: python version, no dot
         --notests: keep going if no tests FIXMEEEEE
         --basebranch ARG: use ARG as base git branch instead of master
EOF
}

function portfile_add_pyversion ()
{
    pypkg="${1}"; shift
    pyver="${1}"; shift

    grep -E '^python.versions\s+' "./python/${pypkg}/Portfile" && \
        (grep -E "^python.versions\s+${pyver}" "./python/${pypkg}/Portfile" || \
            sed -i "s/^python.versions\(.*\)/python.versions\1 ${pyver}/" "python/${pypkg}/Portfile" && \
            grep -E "^python.versions\s+.* ${pyver}" "./python/${pypkg}/Portfile")
}

function get_versinfo()
{
    sh -c 'printf "%s\n" "macOS `sw_vers -productVersion` `sw_vers -buildVersion` `uname -m`" "`xcodebuild -version|awk '\''NR==1{x=$0}END{print x" "$NF}'\''`"'
}

function upgrade_port()
{
    pypkg="${1}"; shift
    pyver="${1}"; shift
    notests="${1}"; shift

    git stash || true
    sudo port_cutleaves || true
    git co "${basebranch}"
    branchname="${pypkg}_py${pyver}"
    git br -d "${branchname}" || true
    git cob "${branchname}"
    git co 'stash@{0}' -- "./python/${pypkg}" || true
    if [ "$(git st --short|wc -l)" == 0 ]; then
        portfile_add_pyversion "${pypkg}" "${pyver}"
    fi
    git add "./python/${pypkg}"
    git ci -m "${pypkg}: add python$(cut -b1 <<< "${pyver}").$(cut -b2- <<< "${pyver}") subport"
    git fpush -f
    git show -p
    portindex
    port lint --nitpick "./python/${pypkg}/" | grep '0 errors and 0 warnings found.'
    sudo port test "./python/${pypkg}/" || "${notests}"
    sudo port install -vst "./python/${pypkg}/"
    cat << EOF
=========================================
${pypkg}: SUCCESS
=========================================
EOF
    sudo port uninstall "${pypkg}"
    sudo port_cutleaves || true
    git co "${basebranch}"

    if [ -n "$(git stash list)" ]; then
        git stash pop
        git co -- "./python/${pypkg}/"
        git stash
    fi
}

function gen_prtxt ()
{
    pypkg=$1; shift
    pyver=$1; shift

    cat << EOF | tee /dev/tty | pbcopy
#### Description

${pypkg}: add python$(cut -b1 <<< "${pyver}").$(cut -b2- <<< "${pyver}") subport

###### Type(s)
- [ ] bugfix
- [x] enhancement
- [ ] security fix

###### Tested on
$(get_versinfo)

###### Verification <!-- (delete not applicable items) -->
Have you

- [x] followed our [Commit Message Guidelines](https://trac.macports.org/wiki/CommitMessages)?
- [x] squashed and [minimized your commits](https://guide.macports.org/#project.github)?
- [x] checked that there aren't other open [pull requests](https://github.com/macports/macports-ports/pulls) for the same change?
- [x] checked your Portfile with \`port lint --nitpick\`?
- [x] tried existing tests with \`sudo port test\`?
- [x] tried a full install with \`sudo port -vst install\`?
- [x] tested basic functionality of all binary files?

<!-- Use "skip notification" (surrounded with []) to avoid notifying maintainers -->
EOF
}

function main()
{
    notests=false
    basebranch=master

    while getopts "hp:-:" opt; do
        case ${opt} in
            h) # help message
                usage
                exit 0
                ;;
            p)
                pyver="${OPTARG}"
                ;;
            -)
                case "${OPTARG}" in
                    help)
                        usage
                        exit 0
                        ;;
                    notests)
                        notests=true
                        ;;
                    basebranch)
                        basebranch="${!OPTIND}"
                        OPTIND=$((OPTIND + 1))
                        ;;
                    *)
                        printf 'Unknown option, exiting now\n' >&2
                        exit 1
                        ;;
                esac
                ;;
            ?)
                printf 'Unknown option, exiting now\n' >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ ${1:-} == '--' ]] && shift

    if [ $# -lt 1 ]; then
        echo "Missing port name" >&2
        usage
        exit 1
    fi

    grep -E '^file:///tmp/macports-ports \[nosync,default\]$' /opt/local/etc/macports/sources.conf || \
        (echo 'did you change /opt/local/etc/macports/sources.conf?' && false)
    grep -E '^#rsync://rsync.macports.org/macports/release/tarballs/ports.tar \[default\]$' \
        /opt/local/etc/macports/sources.conf || \
        (echo 'did you change /opt/local/etc/macports/sources.conf?' && false)
    while [ $# -gt 0 ]; do
        pypkg="${1}"; shift
        upgrade_port "${pypkg}" "${pyver}" "${notests}" "${basebranch}"
        gen_prtxt "${pypkg}" "${pyver}"
        if [ $# -gt 0 ]; then
            read -rp "Create github PR now. Press [ENTER] when done "
        fi
    done

}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
