#!/usr/bin/env bash

# upgrade all macports while doing some house cleaning
# https://stackoverflow.com/a/7491014

# ==============================================================
# ======================= PORT SPECIFIC ========================
# ==============================================================
#
readonly PORTS=""
# these ports change often and won't be fixed soon
readonly SKIP_PORT_MD5=""
#function handle_ghidra()
#{
#    portfile="${1}"
#    shift
#    set_param "${portfile}" java.version 17+
#    set_param "${portfile}" github.setup 'NationalSecurityAgency ghidra 10.4 Ghidra_ _build'
#}

# ==============================================================
# ==============================================================
# ==============================================================

if [ -n "${DEBUG}" ]; then
    exec 5> /tmp/bash_debug_output.txt
    BASH_XTRACEFD="5"
    PS4='$LINENO: '
    set -x -T
fi
set -e -u -o pipefail

# freezeports_hashes file format:
# $ cat ~/.local/share/macports/freezeports_hashes
# dd94e2d3e7eed7f7bfcc1b3f0afb3835    google-cloud-sdk
# 43bf28556dfc9b534d5cc4fd08662a30    qt5-qttools
FREEZEPORTS_HASHES="${XDG_DATA_DIR:-${HOME}/.local/share/macports/freezeports_hashes}"
readonly FREEZEPORTS_HASHES

function usage()
{
    cat << EOF
Usage: ${0##*/} [OPTION]...
Options: -h, --help: show this help dialog
         --no-selfupdate: run \`port selfupdate\`
EOF
}

function set_param()
{
    portfile="${1}"
    shift
    param="${1}"
    shift
    value="${*}"
    shift
    (grep -qE "^${param}(\s+)" "${portfile}" \
        && sed -i -E "s/^${param}(\s+).*$/${param}\1${value}/g" "${portfile}") \
        || echo -e "\n${param}   ${value}" >> "${portfile}"
}

function handle_depends()
{
    portfile="${1}"
    shift
    action="${1}"
    shift
    value="${1}"
    shift

    case "${action}" in
        add)
            printf 'IMPLEMENT ME!\n'
            exit 1
            ;;
        rm)
            sed -i -E "s/\bport:${value}\b//g" "${portfile}"
            ;;
        mv)
            newval="${1}"
            sed -i -E "s/\bport:${value}\b/port:${newval}/g" "${portfile}"
            shift
            ;;
    esac
}

function readhash()
{
    local portname="${1}"
    shift

    # https://unix.stackexchange.com/a/462089
    declare -n hashes="freezeports_md5"
    # shellcheck disable=SC2034
    hashes["${portname}"]="$(awk "/${portname}/ {print \$1}" "${FREEZEPORTS_HASHES}")"
}

function macports_localchanges()
{
    declare -A freezeports_md5=()
    for portname in ${PORTS}; do
        readhash "${portname}"
        portfile="$(port file "${portname}")"
        portfile_md5_actual="$(md5sum "${portfile}" | awk '{print $1}')"
        portfile_md5_expected="${freezeports_md5[${portname}]}"
        if [ "${portfile_md5_actual}" != "${portfile_md5_expected}" ] \
            && [[ ! ".*${portname}.*" =~ ${SKIP_PORT_MD5} ]]; then
            tmpfile=$(mktemp)
            echo "${portname} updated!"
            echo -e "\"m\tLINE\t0\n\t$(md5sum "${portfile}" | awk "{print \$1  \"\t${portname}\"}")" > "${tmpfile}"
            vim -i "${tmpfile}" -O "${FREEZEPORTS_HASHES}" "${portfile}"
            rm "${tmpfile}"
        else
            # https://stackoverflow.com/a/33387433
            handle_"${portname}" "${portfile}"
        fi
    done
}

function postinstall_tasks()
{
    sudo rm -f /opt/local/etc/gitconfig

    # shellcheck disable=SC2016
    port contents keychain \
        | grep /opt/local/bin \
        | xargs sudo sed -i -E 's#^keydir="\$\{HOME\}/.keychain"$#keydir="\${HOME}/.local/share/ssh-agent"#'
}

function port_select_review()
{
    port select --summary |
        tail -n +3 |
        awk '{
            for (col=3; col <= NF; col++) {
                if ($col != "none") {
                    arr[$col]=true
                }
            }
            if ($2 in arr == 0) {
                printf "%s -> %s\toptions: ", $1, $2
                for (select in arr) {
                    printf "%s ", select
                }; printf "\n"
            }
            delete arr
        }' |
        column -t
}

function main()
{
    run_port_selfupdate=true

    while getopts "h-:" opt; do
        case "${opt}" in
            h) # help message
                usage
                exit 0
                ;;
            -)
                case "${OPTARG}" in
                    help)
                        usage
                        exit 0
                        ;;
                    no-selfupdate)
                        run_port_selfupdate=false
                        ;;
                    *)
                        printf "Unknown option, exiting now\n" >&2
                        exit 1
                        ;;
                esac
                ;;
            ?)
                echo "Unknown option, exiting now" >&2
                exit 1
                ;;
        esac
    done
    if "${run_port_selfupdate}"; then
        port selfupdate
    fi
    macports_localchanges
    port upgrade outdated
    port uninstall leaves inactive rleaves || true
    port reclaim -N || true
    port_cutleaves
    postinstall_tasks
    port_select_review
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
