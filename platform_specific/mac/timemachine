#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Write_description_and_usage_example_here
TODO: https://gist.github.com/gsong/7164324
https://github.com/briankendall/check-time-machine
"""

import argparse
import logging
import os
import sys

LOG = logging.getLogger()
LOG.setLevel("INFO")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="enable debug logging information",
    )
    parser.add_argument(
        "-b",
        "--basedir",
        default="/Volumes/.timemachine",
        help="specify time machine backup db dir",
    )
    parser.add_argument(
        "--device", default="", help="device name in time machine backup dir"
    )
    parser.add_argument(
        "--always-symlink",
        action="store_true",
        help="create a symlink even if the file doesn't exist in that backup",
    )
    parser.add_argument(
        "SYMLINK_DIR", help="name of directory in which to create symlinks"
    )
    parser.add_argument(
        "FILE", nargs="+", help="list of files for which to create symlinks"
    )
    args = parser.parse_args()
    if args.debug:
        LOG.setLevel(logging.DEBUG)
    return args


def ensure_dir(dirname):
    if not os.path.isdir(dirname):
        try:
            LOG.debug("creating dir {}".format(dirname))
            os.makedirs(dirname)
        except OSError as e:
            LOG.fatal("error creating dir '{}': {}".format(dirname, e))
            sys.exit(1)


def create_symlinks_for_file(symlink_dir, backupsdir, filearg, always_symlink=False):
    filepath = os.path.realpath(filearg).strip("/")
    backups = os.listdir(backupsdir)
    for b in backups:
        backupfilepath = os.path.join(backupsdir, b, "Macintosh HD - Data", filepath)

        if always_symlink or os.path.exists(backupfilepath):
            filename = os.path.basename(filepath)
            dstfilepath = os.path.join(symlink_dir, b, filename)
            ensure_dir(os.path.dirname(dstfilepath))
            LOG.debug(
                "creating symlink '{}' -> '{}'".format(backupfilepath, dstfilepath)
            )
            os.symlink(backupfilepath, dstfilepath)


def main():
    args = parse_args()

    backupsdir = os.path.join(args.basedir, args.device)
    for filearg in args.FILE:
        create_symlinks_for_file(
            args.SYMLINK_DIR, backupsdir, filearg, args.always_symlink
        )


if __name__ == "__main__":
    main()
