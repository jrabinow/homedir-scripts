#!/bin/bash

function usage () {
	local progname=$(basename $0)
	cat << EOF
Usage: $progname [OPTION]...
Options:  -c		If base directory doesn't exist, create it
	  -d=ARG	redefine base directory for backup
	  -h		Print this help message
Current env:
DEFAULT_OPTS=$DEFAULT_OPTS
BASEDEST=$BASEDEST
EOF
}

readonly windows_dirs=(
	Desktop
	Documents
	Favorites
	"Saved Games"
)

readonly linux_dirs=(
	bin
	Desktop
	Documents
	Dropbox
	Mail
	mbox
	Videos
	tmpcode
)

readonly linux_hidden_dirs=(
	AndroidStudio2.0/config
	bashrc
	blobby
	electrum
	endgame
	gconf
	gitconfig
	google_authenticator
	gnupg
	mozilla
	minecraft
	muttrc
	pentadactyl
	pentadactylrc
	prboom
	prboom-plus
	profile
	quodlibet
	Skype
	ssh
	teeworlds
	tiemu
	tmux.conf
	vim
	vimrc
	xchat2
	xonotic
	xscreensaver
)

readonly media_dirs=(
	Pictures
	Music
)

readonly config_dirs=(
	autostart
	bleachbit
	chromium
	dconf
	deluge
	git-prompt.sh
	google-musicmanager
	mimeapps.list
	spotify
	touchegg
	xfce4
	XfceThemeManager
)

readonly localshare_dirs=(
	applications
	docky
)

function main () {
	##### INITIALIZATION #####
	#local BASEDEST=/media/${USER}/a669e2c0-9ab5-4679-b34f-7cb66201dbb3
	local BASEDEST=/mnt
	local DEFAULT_OPTS="-aimHAXE --human-readable --progress --no-D"
	local create=false

	while getopts "d:ch" opt; do
		case "${opt}" in
			d)
				BASEDEST="${OPTARG}"
				;;
			c)	
				create=true
				;;
			h|\?)
				usage
				if [ ${opt} == "h" ]; then
					exit 0
				else
					exit 1
				fi
				;;
		esac
	done

	if [ ! -d "${BASEDEST}" ]; then
		if $create ; then
			mkdir "${BASEDEST}"
		else
			echo -e "Error: destination does not exist.\nQuitting now..."
			exit
		fi
	fi

	if [ ! -d "${BASEDEST}/Deleted" ]; then
		mkdir "${BASEDEST}/Deleted"
	fi
	local LOGFILE=$(mktemp --tmpdir backup-log.XXX)

	##### WINDOWS PARTITION BACKUP #####
	local SRC="/media/Windows/Users/Julien"
	local DEST="${BASEDEST}/Backup/Windows"
	local OPTS="$DEFAULT_OPTS -v --progress --delete --exclude=desktop.ini \
		--backup --backup-dir=${BASEDEST}/Deleted"
	#backup "${OPTS}" "${SRC}" "${DEST}" "${windows_dirs[@]}"


	##### LINUX PARTITION BACKUP #####
	local SRC="${HOME}"
	local DEST="${BASEDEST}/Backup/Linux"
	local OPTS="$DEFAULT_OPTS -v --progress --delete --exclude=.dropbox \
		--exclude=.dropbox.cache --backup --backup-dir=${BASEDEST}/Deleted"
	backup "${OPTS}" "${SRC}" "${DEST}" "${linux_dirs[@]}"

	##### LINUX "HIDDEN" FILES: DELETE OLD FILES #####
	local SRC="${HOME}"
	local DEST="${BASEDEST}/Backup/Linux/Hidden Files"
	local OPTS="$DEFAULT_OPTS --delete"
	backup_hidden "${OPTS}" "${SRC}" "${DEST}" "${linux_hidden_dirs[@]}"
	local SRC="$HOME/.config"
	backup "${OPTS}" "${SRC}" "${DEST}/config" "${config_dirs[@]}"
	local SRC="$HOME/.local/share"
	backup "${OPTS}" "${SRC}" "${DEST}/local/share" "${localshare_dirs[@]}"


	##### ICEDOVE (keep old mail that Icedove deletes automatically) #####
	local SRC="${HOME}"
	local DEST="${BASEDEST}/Backup/Linux/Hidden Files"
	local OPTS="$DEFAULT_OPTS --exclude=ImapMail --exclude=Mail"
	backup_hidden "${OPTS}" "${SRC}" "${DEST}" icedove

	##### MEDIA BACKUP #####
	local DEST="${BASEDEST}/Backup/Media"
	local OPTS="$DEFAULT_OPTS --delete"
	backup "${OPTS}" "${SRC}" "${DEST}" "${media_dirs[@]}"

	##### LINUX APACHE SERVER DIRECTORY #####
	#backup "${OPTS}" "/var" "${DEST}" www

	if [ -d "$BASEDEST/Deleted" ]; then
		echo "Files were deleted."
	fi
	echo "Complete log is available in file $LOGFILE"
}

function backup () {
	local OPTS=$1; shift
	local SRC=$1; shift
	local DEST=$1; shift

	if [ ! -d "${DEST}" ]; then
		mkdir -p "${DEST}"
	fi

	while [ $# -gt 0 ]
	do
		dir=$1; shift
		echo "Backing up ${SRC}/${dir} to ${DEST}" | tee -a $LOGFILE
		rsync $OPTS "${SRC}/${dir}" "${DEST}" | tee -a $LOGFILE
		if [ $? != 0 ]; then
			echo "Error backing up ${SRC}/${dir}"
			exit 1
		fi
		echo "" | tee -a $LOGFILE
	done
}

function backup_hidden () {
	local OPTS=$1; shift
	local SRC=$1; shift
	local DEST=$1; shift

	while [ $# -gt 0 ]
	do
		dir=$1; shift
		# if file doesn't exist, can't be renamed -> suppress error
		mv "$DEST/${dir}" "$DEST/.${dir}" 2>/dev/null
		echo "Backing up ${SRC}/.${dir} to ${DEST}" | tee -a $LOGFILE
		rsync $OPTS "${SRC}/.${dir}" "${DEST}" | tee -a $LOGFILE
		if [ $? != 0 ]; then
			echo "Error backing up ${SRC}/.${dir}"
			exit 1
		fi
		mv "$DEST/.${dir}" "$DEST/${dir}"
		echo "" | tee -a $LOGFILE
	done
}


if [ "${BASH_SOURCE[0]}" == "$0" ]; then
	main "$@"
fi
