#!/usr/bin/env bash

function usage () {
        cat << EOF
    usage: ghpr -t <title> [options]

    Create a Pull Request (PR) in GitHub.

    OPTIONS:
       -h <head>       Branch you want to PR. It has to exist in the remote. (Default: current branch)
       -b <base>       Branch where you want your PR merged into. (Default: master)
       -t <title>      Title of the PR (Default: the last commit's title, as long as there is only one commit in the PR)
       -d <description>    Description of the PR
       -c          Copy the PR URL to the clipboard
       -f          Fake run, doesn't make the request but prints the URL and body
EOF
}

function main () {
    # check if current dir is git repo
    if ! git ls-files >& /dev/null; then
        printf "Fatal: Not a git repository (or any of the parent directories): .git\n"
        exit 1
    fi

    # check if access token is set
    readonly ACCESS_TOKEN="$(git config auth.token)"

    if [[ -z "${ACCESS_TOKEN}" ]]; then
        printf "Oops! Seems to be a problem with your Github API token. Use below link to generate token\n"
        printf "  https://github.com/settings/tokens/new\n"
        printf "and then run this command to save token\n"
        printf "  git config --global auth.token YOUR_ACCESS_TOKEN\n"
        exit 1
    fi

    HEAD="$(git symbolic-ref --short HEAD)"
    BASE=staging
    OWNER_URL="$(git remote -v | awk '/https:..github.com.* .push.$/ { sub(/^https:\/\/github.com\//, "", $2); print $2 }' | head -1)"
    CONTRIBUTOR_URL="$(git remote -v | awk '/git@github.com.* .push.$/ { sub(/^git@github.com:/, "", $2); print $2 }' | head -1)"
    if [[ -z "${OWNER_URL}" ]]; then
        OWNER_URL="${CONTRIBUTOR_URL}"
    fi
    OWNER="$(cut -d/ -f1 <<< "${OWNER_URL}")"
    REPO="$(cut -d/ -f2 <<< "${OWNER_URL}"| sed -e 's/\.git$//')"
    CONTRIBUTOR=$(cut -d/ -f1 <<< "${CONTRIBUTOR_URL}")

    if [[ $# -eq 0 ]]; then
        usage
        exit
    fi

    while getopts “h:b:t:d:cf” OPTION
    do
        case "${OPTION}" in
            h)
                HEAD="${OPTARG}"
                ;;
            b)
                BASE="${OPTARG}"
                ;;
            t)
                TITLE="${OPTARG}"
                ;;
            d)
                DESCRIPTION="${OPTARG}"
                ;;
            c)
                CLIPBOARD=true
                ;;
            f)
                FAKE=true
                ;;
            ?)
                usage
                exit
                ;;
        esac
    done

    if [[ -z "${TITLE}" ]]; then
        COUNT="$(git log --oneline $BASE..HEAD | wc -l)"
        if [[ "${COUNT}" -eq 1 ]]; then
            TITLE="$(git log -1 --pretty=%s)"
        else
            cat <<-EOS >&2
    Refusing to choose a PR title for you, since there are many commits to choose from. Please specify -t yourself.
EOS
            exit 1
        fi
    fi

    if [ ! -z "${CONTRIBUTOR}" ] && [[ "${OWNER}" != "${CONTRIBUTOR}" ]]; then
        HEAD="${CONTRIBUTOR}:${HEAD}"
    fi

    BODY=("\"head\": \"${HEAD}\"", "\"base\": \"${BASE}\"", "\"title\": \"${TITLE}\"")

    if [[ -n "${DESCRIPTION}" ]]; then
        BODY+=(", \"body\": \"$(sed -e 's/$/\\n/' <<< "${DESCRIPTION}" | tr -d '\n')\"")
    fi

    BODY="{${BODY[*]}}"

    PR_URL="https://api.github.com/repos/${OWNER}/${REPO}/pulls"

    if [[ "${FAKE}" ]]; then
        printf "Fake run, not making the request\n"
        printf "  ${PR_URL}\n"
        printf "  ${BODY}\n"
        exit
    else
        RESPONSE="$(curl -s -H "Authorization: token ${ACCESS_TOKEN}" -H "Content-Type: application/json" -d "${BODY}" "${PR_URL}")"
    fi

    URL="$(grep -Eo "\"html_url\": \"(.*?\/pull\/\\d+)\"," <<< "${RESPONSE}" | sed -E "s/.*\"(https.*)\",/\\1/")"
    if [[ -n "${URL}" ]]; then
        printf "${URL}\n"
    else
        printf "${RESPONSE}\n" | jq '.'
    fi

    if [[ "${CLIPBOARD}" ]]; then
        if [[ "$(type pbcopy)" == *"not found"* ]]; then
            CLIP_COMMAND="xclip -selection clipboard"
        else
            CLIP_COMMAND="pbcopy"
        fi
        printf "${URL}\n" | "${CLIP_COMMAND}"
    fi
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
