#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Write_description_and_usage_example_here
"""

import argparse
import logging
from urllib.parse import unquote, parse_qs, urlsplit

LOG = logging.getLogger()
LOG.setLevel("INFO")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="enable debug logging information",
    )
    parser.add_argument(
        "--decode",
        action="store_true",
        help="decode query params when urlencoded",
    )
    parser.add_argument(
        "url",
        # type=int,
        nargs="+",
        help="url",
    )
    args = parser.parse_args()
    if args.debug:
        LOG.setLevel(logging.DEBUG)
    return args


# urldefense.proofpoint.com uses its own encoding scheme, because screw
# standards I guess ðŸ™„
# https://help.proofpoint.com/Threat_Insight_Dashboard/Concepts/How_do_I_decode_a_rewritten_URL%3F
def decode(url, is_proofpoint=False):
    if url.startswith("http"):
        if is_proofpoint:
            url = url.replace("-", "%").replace("_", "/")
        return unquote(url)
    return url


def main():
    args = parse_args()

    for url in args.url:
        is_proofpoint = url.startswith("https://urldefense.proofpoint.com/v2/")
        parsed_url = urlsplit(url)
        queryparams = parse_qs(parsed_url.query)
        for k, v in queryparams.items():
            if args.decode:
                queryvals = [decode(e, is_proofpoint) for e in v]
            else:
                queryvals = v
            fmt_queryvals = ", ".join(queryvals)
            print("{} -> {}".format(k, fmt_queryvals))


if __name__ == "__main__":
    main()
