#!/usr/bin/env bash

set -e -u
set -o pipefail

# download and assemble mp4 files from streaming services
# Open developer tools, check the network requests panel, and copy the URL for the m3u file, which you can then
# feed into this script as follows:
# $ stream2mp4 URL
# Once the script is done running, the mp4 file will be in your ~/Downloads folder

readonly FRAGMENT_DIRNAME="fragments"

function usage ()
{
    cat << EOF
Usage: $(basename $0) [OPTION]... M3U_URL
Options: --help, -h: show this help dialog
EOF
}


function download_m3u_file ()
{
    local readonly url="${1}"; shift

    m3u_file="playlist.m3u"     # hardcode value to avoid too long file names
    curl -s "${url}" -o "${m3u_file}"
    printf "%s\n" "${m3u_file}"
}

function download_fragments ()
{
    local readonly url="${1}"; shift
    local readonly m3u_file="${1}"; shift
    local readonly baseurl="$(dirname "${url}")"

    mkdir -p "${FRAGMENT_DIRNAME}"

    cd "${FRAGMENT_DIRNAME}"
    aria2c -x10 -s5 -m0 -j20 -i="../${m3u_file}"
    #grep -v '^#EXT' "../${m3u_file}" | while read; do
    #    printf "Downloading fragment %s\n" "${REPLY}" >&2
        #curl -s --retry 20 --retry-delay 1 --retry-connrefused "${baseurl}/${REPLY}" -o "$(basename "${REPLY}")"
    #done
    cd - > /dev/null

    printf "%s/%s\n" "$(pwd)" "${FRAGMENT_DIRNAME}"
}

function prep_m3u_file ()
{
    local readonly m3u_file="${1}"; shift
    local readonly fragment_dir="${1}"; shift
    #local readonly url="${1}"; shift
    #local readonly baseurl="$(dirname "${url}")"

    #sed -i -E "/^#EXT/d;s/$/'/;s#^[^/]*#file '${fragment_dir}#" "${m3u_file}"
    sed -i -E "/^#EXT/d;s#^[^/]*#file '${fragment_dir}#" "${m3u_file}"
}

function convert_to_mp4 ()
{
    local readonly m3u_file="${1}"; shift
    local readonly mp4_output_file="${1}"; shift
    ffmpeg -f concat -safe 0 -i "${m3u_file}" -c copy "${mp4_output_file}"
}

function delete_tempfiles ()
{
    local readonly tmpdir="${1}"; shift
    rm -r "${tmpdir}/${FRAGMENT_DIRNAME}"
}

function main ()
{
    local output_file="$HOME/Downloads/output.mp4"
    while getopts "ho-:" opt; do
        case ${opt} in
            h)  # help message
                usage
                exit 0
                ;;
            o)
                output_file="${}"
                ;;
            -)
                case "${OPTARG}" in
                    help)
                        usage
                        exit 0
                        ;;
                    output)
                        output_file="${OPTIND}"
                        ;;
                    *)
                        printf 'Unknown option, exiting now\n' >&2
                        exit 1
                        ;;
                esac
                ;;
            ?)
                printf 'Unknown option, exiting now\n' >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ "${1:-}" == '--' ]] && shift

    if [ $# == 0 ]; then
        usage
        exit 1
    fi
    local readonly url="${1}"; shift

    readonly output_file
    test -f "${output_file}" && printf "${output_file} already exists; refusing to overwrite" && exit 1
    local readonly tmpdir="$(mktemp -dp /tmp)"
    cd "${tmpdir}"
    local readonly m3u_file=$(download_m3u_file "${url}" "${tmpdir}")
    local readonly fragment_dir="$(download_fragments "${url}" "${m3u_file}")"
    prep_m3u_file "${m3u_file}" "${fragment_dir}"
    convert_to_mp4 "${m3u_file}" "${output_file}"
    delete_tempfiles "${tmpdir}"
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
