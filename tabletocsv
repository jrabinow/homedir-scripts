#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Write_description_and_usage_example_here
"""

import argparse
import logging
import urllib.request
import os
import stat

LOG = logging.getLogger()
LOG.setLevel("INFO")
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.StreamHandler()
ch.setFormatter(formatter)
LOG.addHandler(ch)


# I'm lazy and just included the html_table_parser in here, this is not the proper way to package dependencies

# https://pypi.org/project/html-table-parser-python3/

# -----------------------------------------------------------------------------
# Name:        html_table_parser
# Purpose:     Simple class for parsing an (x)html string to extract tables.
#              Written in python3
#
# Author:      Josua Schmid
#
# Created:     05.03.2014
# Copyright:   (c) Josua Schmid 2014
# Licence:     AGPLv3
# -----------------------------------------------------------------------------

from html.parser import HTMLParser


class HTMLTableParser(HTMLParser):
    """This class serves as a html table parser. It is able to parse multiple
    tables which you feed in. You can access the result per .tables field.
    """

    def __init__(
        self,
        decode_html_entities=False,
        data_separator=" ",
    ):
        HTMLParser.__init__(self, convert_charrefs=decode_html_entities)

        self._data_separator = data_separator

        self._in_td = False
        self._in_th = False
        self._current_table = []
        self._current_row = []
        self._current_cell = []
        self.tables = []

    def handle_starttag(self, tag, attrs):
        """We need to remember the opening point for the content of interest.
        The other tags (<table>, <tr>) are only handled at the closing point.
        """
        if tag == "td":
            self._in_td = True
        if tag == "th":
            self._in_th = True

    def handle_data(self, data):
        """This is where we save content to a cell"""
        if self._in_td or self._in_th:
            self._current_cell.append(data.strip())

    def handle_endtag(self, tag):
        """Here we exit the tags. If the closing tag is </tr>, we know that we
        can save our currently parsed cells to the current table as a row and
        prepare for a new row. If the closing tag is </table>, we save the
        current table and prepare for a new one.
        """
        if tag == "td":
            self._in_td = False
        elif tag == "th":
            self._in_th = False

        if tag in ["td", "th"]:
            final_cell = self._data_separator.join(self._current_cell).strip()
            self._current_row.append(final_cell)
            self._current_cell = []
        elif tag == "tr":
            self._current_table.append(self._current_row)
            self._current_row = []
        elif tag == "table":
            self.tables.append(self._current_table)
            self._current_table = []


def url_get_contents(url):
    """Opens a website and read its binary contents (HTTP Response Body)"""
    req = urllib.request.Request(url=url)
    f = urllib.request.urlopen(req)
    return f.read()


def is_local_file(path):
    try:
        return stat.S_ISREG(os.stat(path).st_mode)
    except FileNotFoundError as e:
        return False


def get_contents(path):
    contents = ""
    if is_local_file(path):
        with open(path) as f:
            contents = f.read()
    elif path.startswith("http"):
        contents = str(url_get_contents(path))
    return contents


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="enable debug logging information",
    )
    parser.add_argument("URL", help="URL to download and parse table from")
    return parser.parse_args()


def main():
    args = parse_args()
    contents = get_contents(args.URL)

    p = HTMLTableParser()
    p.feed(contents)
    outdata = "\n".join(
        (",".join((f'"{e}"' if "," in e else e for e in row)) for row in p.tables[0])
    )
    print(outdata)


if __name__ == "__main__":
    main()
