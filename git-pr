#!/usr/bin/env bash

if [ -n "${DEBUG}" ]; then
    exec 5> /tmp/bash_debug_output.txt
    BASH_XTRACEFD="5"
    PS4='$LINENO: '
    set -x -T
fi
set -e -u
set -o pipefail

# Create PR and auto-link to jira ticket if one is provided
#
# Usage:
# $ git pr [OPTION]... [TICKET_NUM]
# Options: -b ARG: make pull request to this branch
#          -t ARG: use title ARG for PR
#          -h: show this help dialog

# call as
# git pr JIRA-123
#
# needs - jq, dos2unix (both available in macports or homebrew)
#       - gh from https://cli.github.com/ or https://ports.macports.org/port/gh/
#       - GNU sed
#
# place this script in your PATH, for example ~/bin
# chmod +x ~/bin/git-pr
# replace jira_user variable below with your own jira account email or define
# in an appropriately sourced file as below
# replace jira_api_token below with your own api token
# https://id.atlassian.com/manage/api-tokens
#
# shellcheck disable=SC1090
source ~/.local/share/bash/perscreds
# shellcheck disable=SC1090
source ~/.local/share/bash/joboxcreds

function main()
{
    # shellcheck disable=SC2153
    readonly jira_domain="${JIRA_DOMAIN}"
    readonly jira_user="${JIRA_LOGIN}"
    # shellcheck disable=SC2153
    readonly jira_api_token="${JIRA_API_TOKEN}"
    dst_branch=master

    while getopts "b:ht:" opt; do
        case ${opt} in
            b)
                dst_branch="${OPTARG}"
                ;;
            h) # help message
                cat << EOF
Usage: $(basename "${0}") [OPTION]... [TICKET_NUM]
Options: -b ARG: make pull request to this branch 
         -h: show this help dialog
         -t ARG: use title ARG for PR
EOF
                exit 0
                ;;
            t)
                title="${OPTARG}"
                ;;
            ?)
                echo "Unknown option, exiting now" >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ "${1:-}" == '--' ]] && shift

    arg="${1:-}"
    shift || true

    local jira_ticket=false
    local use_file=false
    if [ -f "${arg}" ]; then
        use_file=true
        filepath="${arg}"
    else
        ticket_id="${arg}"
        case "${ticket_id}" in
            CS* | DA* | DISP* | ROCKET* | OM* | OPS* | PRODUCT* | BS* | ENG* | JOBOXOPS* | JOBOX*)
                jira_ticket=true
                ;;
            ?)
                jira_ticket=false
                ;;
        esac
        if "${jira_ticket}"; then
            ticket_info=$(curl -s -u "${jira_user}:${jira_api_token}" \
                -H 'Content-Type: application/json' \
                "${jira_domain}/rest/api/latest/issue/${ticket_id}")
            local jira_ticket_title
            jira_ticket_title="$(jq -r '.fields.summary' <<<"${ticket_info}")"
            pr_title="${ticket_id}: ${title:-${jira_ticket_title:-$(git log -n1 --pretty=format:%s)}}"
            # last sed is to convert from jira format links to github markdown
            ticket_summary="$(jq -r '.fields.summary, .fields.description' <<< "${ticket_info}" \
                | dos2unix \
                | sed -E 's/\[([^\|]+)\|([^\|]+)(\|smart-link)?\]/[\1](\2)/g')"
            if [[ "${ticket_summary}" == 'null' ]]; then
                ticket_summary="${pr_title}"
            fi
            pr_summary="${jira_domain}/browse/${ticket_id}"$'\n'$"${ticket_summary/null/}"
        else
            printf "no ticket info\n"
            pr_title="${title:-$(git log -n1 --pretty=format:%s)}"
            pr_summary="${pr_title}"
        fi
        pr_description="$(git changelog | tac | awk '{sub($1, ""); print $0}' | sed 's/^/-/')"
        if [[ "$(wc -l <<<"${pr_description}")" -eq 1 ]]; then
            pr_description="$(git log -n1 --pretty=format:%b)"
        fi
    fi

    git_src_branch=$(git rev-parse --abbrev-ref HEAD)
    if "${use_file}"; then
        commit_desc_file="${filepath}"
    else
        commit_desc_file="$(mktemp -p . "${git_src_branch//\//_}.XXXXXX.txt")"
        cat > "${commit_desc_file}" << EOF
Title: ${pr_title}

Branch: ${dst_branch}

## Summary
${pr_summary}

## Description
${pr_description}

## Test plan
testinprod
EOF
    fi
    vim -c 'set formatoptions-=cro' "${commit_desc_file}"
    pr_title=$(grep '^Title:' "${commit_desc_file}" | cut -d' ' -f2-)
    dst_branch=$(grep '^Branch: ' "${commit_desc_file}" | cut -d' ' -f2-)
    # https://stackoverflow.com/a/38972737
    summary=$(awk '/^## Summary/{flag=1; next} /^## Description/{flag=0} flag' "${commit_desc_file}" | sed 's/"/\\"/g' || true)
    description=$(awk '/^## Description/{flag=1; next} /^## Test plan/{flag=0} flag' "${commit_desc_file}" | sed 's/"/\\"/g' || true)
    test_plan=$(sed -E '1,/^## Test plan/d' "${commit_desc_file}" | sed 's/"/\\"/g' || true)
    pr_desc="$(printf "## Summary\n%s\n\n## Description\n%s\n\n## Test plan\n%s\n" "${summary}" "${description}" "${test_plan}")"
    printf -- "%s\n%s\n------------------\n%s\n----------------------\n" "${pr_title}" "${dst_branch}" "${pr_desc}"
    remote=$(git remote)
    remote_src_branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD || true)
    if [[ -z "${remote_src_branch}" ]]; then
        git branch -u "${remote}" "${git_src_branch}"
    fi
    git push -u "${remote}" "${git_src_branch}"
    git branch "--set-upstream-to=origin/${git_src_branch}" "${git_src_branch}"
    (gh pr create --title "${pr_title}" --body "${pr_desc}" --base "${dst_branch}" \
        | pbcopy && pbpaste && rm "${commit_desc_file}") \
        || (printf "failed to create PR - file saved here: %s\n" "${commit_desc_file}" && false)
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
