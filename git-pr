#!/usr/bin/env bash

set -e -u
set -o pipefail

# needs - jq, dos2unix (both available in macports or homebrew)
#       - ghpr from https://github.com/Idnan/github-pr.git
#         clone the repo, put the binary in your PATH and go through the README
#
# place this script in your PATH, for example ~/bin
# chmod +x ~/bin/git-pr
# replace jira_user variable below with your own jira account email
# replace jira_authtoken below with your own authtoken https://id.atlassian.com/manage/api-tokens
#
# Usage: 
# $ git pr [OPTION]... [TICKET_NUM]
# Options: -b ARG: make pull request to this branch 
#          -t ARG: use title ARG for PR
#          -h: show this help dialog

function main () {
    readonly jira_domain='https://mydomain.atlassian.net'
    readonly jira_user='email@address.com'
    readonly jira_authtoken='************************'
    dst_branch=integration
    while getopts "b:ht:" opt; do
        case ${opt} in
            b)
                dst_branch="${OPTARG}"
                ;;
            h)    # help message
                cat << EOF
Usage: $(basename $0) [OPTION]... [TICKET_NUM]
Options: -b ARG: make pull request to this branch 
         -h: show this help dialog
         -t ARG: use title ARG for PR
EOF
                exit 0
                ;;
            t)
                title="${OPTARG}"
                ;;
            ?)
                echo "Unknown option, exiting now" >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))
    [[ "${1:-}" == '--' ]] && shift

    ticket_id="${1:-}"; shift || true
    jira_ticket=false
    case "${ticket_id}" in
        CS*|DA*|DISP*|ROCKET*|OM*|OPS*|PRODUCT*|BS*|ENG*)
            jira_ticket=true
            ;;
        ?)
            jira_ticket=false
            ;;
    esac
    if "${jira_ticket}"; then
        ticket_info=$(curl -s -u "${jira_user}:${jira_authtoken}" \
            -H 'Content-Type: application/json' \
            "${jira_domain}/rest/api/latest/issue/${ticket_id}")
        pr_title="${ticket_id}: ${title:-$(git log -n1 --pretty=format:%B)}"
        ticket_description="$(jq -r '.fields.summary, .fields.description' <<< "${ticket_info}"|dos2unix)"
        if [[ "${ticket_description}" == 'null' ]]; then
            ticket_description=""
        fi
        description="${jira_domain}/browse/${ticket_id}"$'\n'$"${ticket_description/null/}"
    else
        printf "no ticket info\n"
        pr_title=${title:-$(git log -n1 --pretty=format:%B)}
        description=""
    fi
    commit_desc_file=$(mktemp -t)
    trap "rm '${commit_desc_file}'" EXIT
    cat > "${commit_desc_file}" << EOF
Title: ${pr_title}

Branch: ${dst_branch}

## Summary:
${pr_title}

## Description:
${description}

## Test plan:
testinprod
EOF
    vim -c 'set formatoptions-=cro' "${commit_desc_file}"
    pr_title=$(grep '^Title:' "${commit_desc_file}" | cut -d' ' -f2-)
    dst_branch=$(grep '^Branch: ' "${commit_desc_file}" | cut -d' ' -f2-)
    summary=$(awk '/^## Summary:/,/^$/' "${commit_desc_file}" | sed 's/"/\\"/g' || "")
    description=$(awk '/^## Description:/,/^$/' "${commit_desc_file}" | sed 's/"/\\"/g' || "")
    test_plan=$(awk '/^## Test plan:/,/^$/' "${commit_desc_file}" | sed 's/"/\\"/g' || "")
    pr_desc="$(printf "%s\n\n%s\n\n%s\n" "${summary}" "${description}" "${test_plan}")"
    printf -- "%s\n%s\n------------------\n%s\n----------------------\n" "${pr_title}" "${dst_branch}" "${pr_desc}"
    src_branch=$(git rev-parse --abbrev-ref HEAD)
    remote=$(git remote)
    remote_src_branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD || true)
    if [[ -z "${remote_src_branch}" ]]; then
        git branch -u "${remote}" "${src_branch}"
    fi
    git push -u "${remote}" "${src_branch}"
    ghpr -t "${pr_title}" -d "${pr_desc}" -b "${dst_branch}" -c || \
        (printf "failed to create PR - file saved here: ${commit_desc_file}\n" && false)
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
