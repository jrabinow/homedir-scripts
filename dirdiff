#!/usr/bin/env python

import os, sys, hashlib
BUFSIZ = 65536

class File:
    def __init__(self, path, hashval, dirname):
        self.name = os.path.basename(path)
        self.path = path
        self.hashval = hashval
        self.dirname = dirname
    def __eq__(f1, f2):
        return f1.name == f2.name
    def __hash__(self):
        return hash(self.name) #int(self.hashval, 16)

def apply_to_dir(dirpath, func):
    __apply_to_dir_internal = lambda x: map(func,
        [ os.path.join(x[0], filename) for filename in x[2]])
    map(__apply_to_dir_internal, os.walk(dirpath))

def main():
    if len(sys.argv) != 3:
        print "Usage: %s dir1 dir2" % sys.argv[0]
        exit(1)
    files = set()
    dirnum = 1
    def hash_file(filepath):
        hasher = hashlib.sha1()
        try:
            with open(filepath, 'rb') as f:
                buf = f.read(BUFSIZ)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = f.read(BUFSIZ)
        except:
            hasher.update('')
        files.add(File(filepath, hasher.hexdigest(), sys.argv[dirnum]))

    dir1, dir2 = sys.argv[1], sys.argv[2]
    apply_to_dir(dir1, hash_file)
    files1 = set(files)
    files.clear()
    dirnum += 1
    apply_to_dir(dir2, hash_file)
    files2 = files

    missing_files = files1.symmetric_difference(files2)
    File.__hash__ = lambda self: hash((self.name, self.hashval))
    differing_files = files1.intersection(files2) - missing_files

    missing_files = sorted(missing_files, key=lambda x: x.path)
    differing_files = sorted(differing_files, key=lambda x: x.path)

    for i in missing_files:
        print "%s:\tin %s" % (i.name, os.path.dirname(i.path))
    for i in differing_files:
        print "%s:\tdiffer" % i.name

if __name__ == '__main__':
    main()
