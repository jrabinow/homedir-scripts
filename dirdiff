#!/usr/bin/env python

import os, sys, hashlib, re
from collections import defaultdict
BUFSIZ = 65536

class File:
    def __init__(self, path, hashval, rootdir):
        self.name = os.path.basename(path)
        self.path = path
        self.hashval = hashval
        self.rootdir = rootdir


def apply_to_dir(dirpath, func):
    __apply_to_dir_internal = lambda x: map(func,
        [ os.path.join(x[0], filename) for filename in x[2]])
    map(__apply_to_dir_internal, os.walk(dirpath))


def main():
    if len(sys.argv) < 3:
        print "Usage: %s dir1 dir2 [dir3...]" % sys.argv[0]
        exit(1)
    files = defaultdict(list)
    dirnum = 1

    def hash_file(filepath):
        hasher = hashlib.sha1()
        try:
            with open(filepath, 'rb') as f:
                buf = f.read(BUFSIZ)
                while len(buf) > 0:
                    hasher.update(buf)
                    buf = f.read(BUFSIZ)
        except:
            hasher.update('')
        return hasher.hexdigest()

    def add_to_dict(filepath):
        rootdir = sys.argv[dirnum]
        path = re.sub("^" + sys.argv[dirnum], "", filepath)
        filename = os.path.basename(path)
        files[path].append(
                File(path, hash_file(filepath), rootdir)
        )

    for i in range(1, len(sys.argv)):
        apply_to_dir(sys.argv[i], add_to_dict)
        dirnum += 1

    missing_files = dict()
    differing_files = dict()
    for k, v in files.items():
        if len(v) == 1:
            missing_files[k] = v[0]
        elif len(v) > 1:
            hashval = v[0].hashval
            if not all(map(lambda x: x.hashval == hashval, v)):
                differing_files[k] = v[0]

    missing_files = sorted(missing_files.values(), key=lambda x: x.path)
    differing_files = sorted(differing_files.values(), key=lambda x: x.path)

    for i in missing_files:
        print "%s:\tadditional file %s" % (i.name, i.rootdir + i.path)
    for i in differing_files:
        print "%s%s:\tdiffer" % (i.rootdir, i.path)


if __name__ == '__main__':
    main()
