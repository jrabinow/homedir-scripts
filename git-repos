#!/usr/bin/env bash

# updates all git repos in directory

if [ -n "${DEBUG}" ]; then
    exec 5> /tmp/bash_debug_output.txt
    BASH_XTRACEFD="5"
    PS4='$LINENO: '
    set -x -T
fi
set -e -u
set -o pipefail

function elem_in()
{
    local e match="$1"
    shift
    for e; do [[ $e == "$match" ]] && return 0; done
    return 1
}

# https://github.com/jrabinow/dotfiles/blob/6e821e959b5261f2db43cde1b10d40c689f5e33e/.config/git/config#L28
function get_github_token()
{
    git config --get-all credential.helper \
        | awk '/store --file/ {print $NF}' \
        | xargs -I% sh -c "cat %"
}

# python requests version: https://stackoverflow.com/a/63720399
# conversion to curl by dumping python: https://stackoverflow.com/a/16630836
function github_authheader()
{
    local orgname="${1}"
    shift
    local github_token="${1}"
    shift
    local b64_token
    b64_token="$(echo -n "${orgname}:${github_token}" | base64)"
    echo "Authorization: Basic ${b64_token}"
}

function run_git_cmd()
{
    gitargs="${*}"
    # we intentionally do not quote the gitargs variable below to allow word
    # splitting
    # shellcheck disable=SC2086
    out=$(printf "=========== UPDATING REPO %s ===========\n" "${subdir}" \
        && printf "%s: " "${subdir}" \
        && git ${gitargs} 2>&1)
    stdbuf -o20K -e20K echo "${out}"
}

function update_existing_repos()
{
    local rootdir="${1}"
    shift
    local force_dirty="${1}"
    shift
    local gitargs="${*}"

    for subdir in *; do
        {
            test -d "${subdir}/.git" && ! elem_in "${subdir}" "${IGNORE_REPOS[@]}"
        } || continue
        cd "${subdir}"
        local repostatus
        if "${force_dirty}"; then
            run_git_cmd "${gitargs}" &
        else
            repostatus=$(git status --short | grep -v '^??' || true)
            if [ -z "${repostatus}" ]; then
                run_git_cmd "${gitargs}" &
            else
                printf "\033[31m=========== DIRTY REPO %s ==========\033[0m\n" "${subdir}"
            fi
        fi
        cd "${rootdir}"
    done
}

function clone_any_missing_repos()
{
    local ORGNAME="${1}"
    local org_repos_url
    local repos_out
    local response_len
    local repo_names
    local dirname
    local page

    readonly ORGNAME

    local org_repos_url="https://api.github.com/orgs/${ORGNAME}/repos?type=all&per_page=100"

    ((page = 1))
    local token
    local authheader

    token="$(get_github_token)"
    authheader="$(github_authheader "${ORGNAME}" "${token}")"

    while :; do
        repos_out="$(curl -s -H "${authheader}" "${org_repos_url}&page=${page}")"
        repo_names="$(jq -r '.[].clone_url' <<< "${repos_out}")"

        for repo in ${repo_names}; do
            dirname="$(basename "${repo}" .git)"
            if [ ! -d "${dirname}" ] && ! elem_in "${dirname}" "${IGNORE_REPOS[@]}"; then
                echo "MISSING ${dirname}; cloning"
                git clone "${repo}"
            fi
        done

        ((page += 1))
        response_len=$(jq '.|length' <<< "${repos_out}")
        [ "${response_len}" -ge 1 ] || break
    done
}

function main()
{
    local ROOTDIR=.
    local team_name_isset=false
    local FORCE_DIRTY=false
    local GITARGS=""

    local IGNORE_REPOS

    while getopts "Cfht-" opt; do
        case ${opt} in
            C)
                ROOTDIR="${!OPTIND}"
                OPTIND=$((OPTIND + 1))
                ;;
            f) # force operation on dirty repos
                FORCE_DIRTY=true
                shift
                ;;
            h) # help message
                cat << EOF
Usage: $(basename "${0}") [OPTION]...
Options: -f: update dirty repos
         -h: show this help dialog
         -t ARG: specify team name
         -C ARG: specify rootdir
         -- ARG1 [ARG2 ...]: arguments run by git instead of "git pull"
EOF
                exit 0
                ;;
            t)
                TEAM_NAME="${!OPTIND}"
                OPTIND=$((OPTIND + 2))
                team_name_isset=true
                ;;
            -)
                GITARGS="${*}"
                shift $#
                ;;
            ?)
                printf "Unknown option, exiting now\n" >&2
                exit 1
                ;;
        esac
    done

    shift $((OPTIND - 1))
    [[ ${1:-} == '--' ]] && shift

    if [ $# -ge 1 ] || [ -z "${GITARGS}" ]; then
        GITARGS="${*:-pull}"
    fi

    if [ "${ROOTDIR}" == "." ]; then
        dirpath=.
        while
            [ "${dirpath}" != "/" ] \
                && [ ! -f "${dirpath}/.gitreposteam" ] \
                && [ ! -f "${dirpath}/.gitreposignore" ]
        do
            dirpath="$(realpath "${dirpath}/..")"
        done
        if [[ "${dirpath}" == / || "${dirpath}" == "." ]]; then
            dirpath="$(pwd)"
        fi
        ROOTDIR="${dirpath}"
    fi

    cd "${ROOTDIR}"

    if [ -f .gitreposignore ]; then
        mapfile -t IGNORE_REPOS < .gitreposignore
    else
        IGNORE_REPOS=()
    fi
    if ! "${team_name_isset}"; then
        TEAM_NAME="$(cat .gitreposteam)"
    fi

    readonly FORCE_DIRTY
    readonly GITARGS
    readonly ROOTDIR
    readonly TEAM_NAME
    readonly IGNORE_REPOS

    if [ "${GITARGS}" == "pull" ]; then
        clone_any_missing_repos "${TEAM_NAME}"
    fi
    update_existing_repos "${ROOTDIR}" "${FORCE_DIRTY}" "${GITARGS}"

    # jobs -p returns list of children as pids, one per line. Don't quote
    # shellcheck disable=SC2046
    wait $(jobs -p)
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
fi
